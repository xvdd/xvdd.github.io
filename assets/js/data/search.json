[ { "title": "Convert a JSON array to CSV with jq", "url": "/posts/convert-a-json-array-to-csv-with-jq/", "categories": "linux", "tags": "", "date": "2022-08-12 23:13:55 +0800", "snippet": "jq is the go-to command-line tool to manipulate JSON data.To share data collected through a REST API by email, I regularly have to convert JSON to tables, usually formatted in Excel.jq can help automate the formatting, using the csv formatter (tsv is another option) that produce data easily imported in Excel.Prepare the dataA first step may be required to produce a flat (without sublevel) array of JSON objects of the same structure.On my case, the input JSON is formatted as such:{ \"meta\": { \"status\": \"success\" }, \"data\": [ { \"id\": 123, \"reference\": \"ABC\", \"name\": \"Name\", \"status\": \"active\", \"expiration\": \"2022-12-31\", \"url\": \"https://some.url/ABC\", \"code\": 1234, \"customization\": [] }, { \"id\": 456, \"reference\": \"DEF\", \"name\": \"Name 2\", \"status\": \"active\", \"expiration\": \"2022-12-31\", \"url\": \"https://some.url/DEF\", \"code\": 5678, \"customization\": [] } ]}Iâ€™m only interested in the data section of the JSON and will remove customization as it carries no information and the input of jq for csv formatting is expected to be flat.The following line produces the expected input:$ cat input.json | jq -r '.data[] | {id, reference, name, status, expiration, url, code}' | jq -n '. |= [inputs]' &gt; array.json[ { \"id\": 123, \"reference\": \"ABC\", \"name\": \"Name\", \"status\": \"active\", \"expiration\": \"2022-12-31\", \"url\": \"https://some.url/ABC\", \"code\": 1234 }, { \"id\": 456, \"reference\": \"DEF\", \"name\": \"Name 2\", \"status\": \"active\", \"expiration\": \"2022-12-31\", \"url\": \"https://some.url/DEF\", \"code\": 5678 }]The second jq command adds back the brackets after the navigation and filtering of the first.CSV formattingThe CSV formatting is done for the header row and the content of the objects:$ cat array.json | jq -r '(.[0]|keys_unsorted),.[]|map(.)|@csv'\"id\",\"reference\",\"name\",\"status\",\"expiration\",\"url\",\"code\"123,\"ABC\",\"Name\",\"active\",\"2022-12-31\",\"https://some.url/ABC\",1234456,\"DEF\",\"Name 2\",\"active\",\"2022-12-31\",\"https://some.url/DEF\",5678This output can be copy/pasted easily into Excel and formatted into a table.References https://stackoverflow.com/questions/39139107/how-to-format-a-json-string-as-a-table-using-jq https://unix.stackexchange.com/questions/569876/add-json-objects-to-array-using-jqAlternative with ExcelMicrosoft Excel can import and manipulate JSON data using Get &amp; Transform (Power Query)." }, { "title": "Reduce a pdf file size with Imagemagick", "url": "/posts/reduce-a-pdf-file-size-with-imagemagick/", "categories": "linux", "tags": "", "date": "2022-08-04 19:22:11 +0800", "snippet": "Convert and split the pdf file to image files (on my system, Imagemagick is called with the convert command):$ convert -density 100 input_file.pdf -quality 90 page.jpg$ lsinput_file.pdfpage-0.jpgpage-1.jpgpage-2.jpgpage-3.jpgpage-4.jpgpage-5.jpgpage-6.jpgpage-7.jpgpage-8.jpgpage-9.jpgpage-10.jpgpage-11.jpgpage-12.jpgIf the document is more than 10 pages, rename the page files to maintain numeric order:$ for i in $(seq 0 9); do mv page-$i.jpg page-0$i.jpg; done$ lsinput_file.pdfpage-00.jpgpage-01.jpgpage-02.jpgpage-03.jpgpage-04.jpgpage-05.jpgpage-06.jpgpage-07.jpgpage-08.jpgpage-09.jpgpage-10.jpgpage-11.jpgpage-12.jpgRebuild the pdf file using the reduced images:$ convert page-* output_file.pdfAdjust density and quality of the first step accordingly to the target file size and expected quality." } ]
